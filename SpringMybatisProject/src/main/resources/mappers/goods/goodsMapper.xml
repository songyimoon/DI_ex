<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.goodsMapper">

<select id="prodNum" resultType="string">
	select PROD_SEQ.nextval from dual
</select>
	
<insert id="goodsInsert" parameterType="gd">
	insert into products 
	(PROD_NUM, PROD_NAME, PROD_PRICE, PROD_IMAGE, PROD_DETAIL,
	 PROD_CAPACITY, PROD_SUPPLIER, PROD_DEL_FEE, RECOMMEND, EMPLOYEE_ID, CTGR)
	values (#{prodNum},#{prodName},#{prodPrice},
	<if test="prodImage!=null">#{prodImage}</if>
	<if test="prodImage==null">null</if>
	,#{prodDetail},
	#{prodCapacity},#{prodSupplier},#{prodDelFee},#{recommend},#{employeeId},#{ctgr})
</insert>

<select id="goodsList" resultType="gd" parameterType="gd">
select rn, prodNum, prodName, prodPrice, prodImage, prodDetail, prodCapacity, prodSupplier, prodDelFee, recommend, employeeId, ctgr
	from (select ROWNUM rn,
	PROD_NUM prodNum, PROD_NAME prodName, PROD_PRICE prodPrice, PROD_IMAGE prodImage, PROD_DETAIL prodDetail,
	PROD_CAPACITY prodCapacity, PROD_SUPPLIER prodSupplier, PROD_DEL_FEE prodDelFee, RECOMMEND recommend, EMPLOYEE_ID employeeId, CTGR ctgr
	from products)
<where>
	<if test="startEndPageDTO != null">
		rn between #{startEndPageDTO.startRow} and #{startEndPageDTO.endRow}
	</if>
</where>	
  



</select>

<select id="getGoodsCount" resultType="int">
	select count(*) from products
</select>

<!-- id는 primary key -->
<!-- result는 일반 컬럼 -->

<resultMap type="model.GoodsDTO" id="baseResult">
	<id column="PROD_NUM" jdbcType="BIGINT" property="prodNum"/>
	<result column="PROD_NAME" jdbcType="VARCHAR" property="prodName"/>
	<result column="PROD_PRICE" jdbcType="BIGINT" property="prodPrice"/>
	<result column="PROD_IMAGE" jdbcType="VARCHAR" property="prodImage"/>
	<result column="PROD_DETAIL" jdbcType="VARCHAR" property="prodDetail"/>
	<result column="PROD_CAPACITY" jdbcType="VARCHAR" property="prodCapacity"/>
	<result column="PROD_SUPPLIER" jdbcType="VARCHAR" property="prodSupplier"/>
	<result column="PROD_DEL_FEE" jdbcType="BIGINT" property="prodDelFee"/>
	<result column="RECOMMEND" jdbcType="VARCHAR" property="recommend"/>	
	<result column="EMPLOYEE_ID" jdbcType="VARCHAR" property="employeeId"/>	
	<result column="CTGR" jdbcType="VARCHAR" property="ctgr"/>
</resultMap>


<select id="goodsDetail" parameterType="string" resultMap="baseResult">
	select
	PROD_NUM, PROD_NAME, PROD_PRICE, PROD_IMAGE, PROD_DETAIL,
	PROD_CAPACITY, PROD_SUPPLIER, 
	PROD_DEL_FEE, RECOMMEND, EMPLOYEE_ID, CTGR 
	from products
	where PROD_NUM=#{prodNum}
</select>

<update id="goodsUpdate" parameterType="gd">
	update products 
	set PROD_PRICE=#{prodPrice}, PROD_DETAIL =#{prodDetail}, PROD_CAPACITY=#{prodCapacity}, 
	PROD_SUPPLIER=#{prodSupplier}, PROD_DEL_FEE=#{prodDelFee}, RECOMMEND=#{recommend}, CTGR=#{ctgr}, PROD_IMAGE = #{prodImage}
	where PROD_NUM=#{prodNum}
</update>

<delete id="goodsDel" parameterType="string">
	delete from products
	where PROD_NUM=#{prodNum}
</delete>

<insert id="cartAdd" parameterType="model.CartDTO">
	merge into cart c1
	using (select PROD_NUM from products where PROD_NUM = #{prodNum} ) p1
	on (c1.PROD_NUM = p1.PROD_NUM and c1.MEM_ID = #{memId})
	When MATCHED THEN 
		update set c1.cart_qty = cart_qty + #{cartQty},
			   c1.cart_price = cart_price + #{cartPrice}	
	When not MATCHED THEN
		insert (c1.MEM_ID, c1.PROD_NUM, c1.cart_qty, c1.cart_price)
		values (#{memId},#{prodNum},#{cartQty},#{cartPrice})	
</insert>

<!-- 사용자가 저장한 카트에 있는 상품번호를 가져옴  -->
<select id="memProdNum" parameterType="string" resultType="string">
	select prod_num from cart
	where MEM_ID = #{memId}
</select>

<!-- association은 한꺼번에 여러개 값 가져오지 못한다. 하나하나 받아와서 저장하기 -->
<!-- 두 테이블에 있는 값을 1:1로 가져올 때 -->
<resultMap type="model.ProductCartDTO" id="productCartMap">
	<association property="productDTO" javaType="model.GoodsDTO">
		<result column="PROD_SUPPLIER" jdbcType="VARCHAR" property="prodSupplier"/>
		<result column="PROD_DEL_FEE" jdbcType="BIGINT" property="prodDelFee"/>
		<result column="PROD_IMAGE" jdbcType="VARCHAR" property="prodImage"/>
		<result column="PROD_NAME" jdbcType="VARCHAR" property="prodName"/>
		<result column="PROD_PRICE" jdbcType="BIGINT" property="prodPrice"/>
	</association>
	
	<association property="cartDTO" javaType="model.CartDTO">
		<id column="PROD_NUM" jdbcType="BIGINT" property="prodNum"/>
		<id column="MEM_ID" jdbcType="VARCHAR" property="memId"/>
		<result column="CART_PRICE" jdbcType="BIGINT" property="cartPrice"/>
		<result column="CART_QTY" jdbcType="BIGINT" property="cartQty"/>		
	</association>
</resultMap>


<select id="cartList" parameterType="model.CartDTO" resultMap="productCartMap">
	select p.PROD_NUM, PROD_SUPPLIER, PROD_DEL_FEE, PROD_IMAGE, PROD_NAME, PROD_PRICE,
			 CART_PRICE, CART_QTY, MEM_ID
	from products p, cart c
	where p.PROD_NUM = c.PROD_NUM and c.MEM_ID = #{memId} and p.PROD_NUM = #{prodNum}
</select>

<update id="goodsCartQtyDown" parameterType="model.CartDTO">
update cart
	set cart_qty = cart_qty - 1,
		cart_price = cart_price - #{cartPrice}
	where mem_id = #{memId} and prod_num = #{prodNum}
</update>

<insert id="purchaseInsert" parameterType="model.PurchaseDTO">
	insert into purchase
	(PURCHASE_NUM, MEM_ID, PURCHASE_TOT_PRICE, PURCHASE_ADDR, PURCHASE_METHOD, PURCAHSE_REQUEST, RECEIVER_NAME, RECEIVER_PHONE, PURCHASE_DATE)
	values (#{purchaseNum}, #{memId}, #{purchaseTotPrice},#{purchaseAddr},#{purchaseMethod},#{purchaseRequest},#{receiverName},#{receiverPhone},sysdate) 
</insert>

<insert id="purchaseListInsert" parameterType="model.CartDTO">
	insert into purchase_list (PURCHASE_NUM, PROD_NUM, PURCHASE_QTY, PURCHASE_PRICE)
	select #{purchaseNum}, PROD_NUM, CART_QTY, CART_PRICE
	from cart 
	where MEM_ID = #{memId} and PROD_NUM = #{prodNum}
</insert>

<delete id="cartDelete" parameterType="model.CartDTO">
	delete from cart
	where MEM_ID = #{memId} and PROD_NUM = #{prodNum}
</delete>

<select id="baseOrderList" parameterType="string" resultType="model.OrderListDTO">
	select p1.PROD_NUM prodNum, PROD_SUPPLIER prodSupplier, PROD_NAME prodName, PROD_IMAGE prodImage, 
		   p2.PURCHASE_NUM purchaseNum, 
		   PURCHASE_DATE purchaseDate, PURCHASE_TOT_PRICE purchaseTotPrice,
		   PAYMENT_APPR_NUM paymentApprNum,
		   REVIEW_CONTENT reviewContent
	from products p1, purchase_list p2, purchase p3, payment p4, review r
	where p1.PROD_NUM = p2.PROD_NUM 
	and p2.PURCHASE_NUM = p3.PURCHASE_NUM
	and p2.PURCHASE_NUM = p4.PURCHASE_NUM(+)
	and p2.PURCHASE_NUM = r.PURCHASE_NUM(+)
	and p2.PROD_NUM = r.PROD_NUM(+)
	and p3.MEM_ID = #{memId}
	order by purchaseNum desc
</select>


<sql id="PAYMENTAPPRNUM">
		select to_char(sysdate,'yyyymmdd') || 
        nvl2(max(PAYMENT_APPR_NUM),substr(max(PAYMENT_APPR_NUM),-6),100000)+1
        from payment
        where substr(PAYMENT_APPR_NUM,1,8) = to_char(sysdate,'yyyymmdd')
</sql>

<insert id="doPayment" parameterType="model.PaymentDTO">
	insert into payment
	(PURCHASE_NUM, PAYMENT_METHOD, PAYMENT_APPR_PRICE, PAYMENT_APPR_NUM, PAYMENT_APPR_DATE, PAYMENT_NUMBER )
	values ( #{purchaseNum},#{paymentMethod},#{paymentApprPrice}, (<include refid="PAYMENTAPPRNUM"/>) ,sysdate, #{paymentNumber} )
</insert>

<insert id="reviewWrite" parameterType="model.ReviewDTO">
	insert into review
	(PURCHASE_NUM, PROD_NUM, REVIEW_DATE, REVIEW_CONTENT, REVIEW_IMG)
	values (#{purchaseNum},#{prodNum},sysdate,#{reviewContent},
	<if test="reviewImg!=null">#{reviewImg}</if>
	<if test="reviewImg==null">null</if>)
</insert>

<select id="reviewInfo" parameterType="model.ReviewDTO" resultType="model.ReviewDTO">
	select PURCHASE_NUM purchaseNum, PROD_NUM prodNum, REVIEW_DATE reviewDate, REVIEW_CONTENT reviewContent, REVIEW_IMG reviewImg
	from review
	where PURCHASE_NUM=#{purchaseNum} and PROD_NUM=#{prodNum}
</select>

<update id="reviewUpdate" parameterType="model.ReviewDTO">
	update review 
	set REVIEW_CONTENT = #{reviewContent}
	where PURCHASE_NUM = #{purchaseNum} and PROD_NUM = #{prodNum}
</update>

<resultMap type="model.GoodsReviewsDTO" id="goodsReviewsMap">
	<association property="goods" javaType="model.GoodsDTO">
		<id column="PROD_NUM" jdbcType="BIGINT" property="prodNum"/>	
		<result column="PROD_NAME" jdbcType="VARCHAR" property="prodName"/>	
		<result column="PROD_PRICE" jdbcType="BIGINT" property="prodPrice"/>	
		<result column="PROD_IMAGE" jdbcType="VARCHAR" property="prodImage"/>	
		<result column="PROD_DETAIL" jdbcType="VARCHAR" property="prodDetail"/>	
		<result column="PROD_CAPACITY" jdbcType="BIGINT" property="prodCapacity"/>	
		<result column="PROD_SUPPLIER" jdbcType="VARCHAR" property="prodSupplier"/>	
		<result column="PROD_DEL_FEE" jdbcType="BIGINT" property="prodDelFee"/>	
		<result column="RECOMMEND" jdbcType="VARCHAR" property="recommend"/>	
		<result column="EMPLOYEE_ID" jdbcType="BIGINT" property="employeeId"/>	
		<result column="CTGR" jdbcType="VARCHAR" property="ctgr"/>	
	</association>

	<collection property="reviews" ofType="model.ReviewDTO">
		<id column="PROD_NUM" jdbcType="BIGINT" property="prodNum"/>
		<id column="PURCHASE_NUM" jdbcType="BIGINT" property="purchaseNum"/>
		<result column="REVIEW_DATE" jdbcType="DATE" property="reviewDate"/>
		<result column="REVIEW_CONTENT" jdbcType="VARCHAR" property="reviewContent"/>
		<result column="REVIEW_IMG" jdbcType="VARCHAR" property="reviewImg"/> 
	</collection>
</resultMap>

<select id="goodsReviews" parameterType="string" resultMap="goodsReviewsMap">
	select p.PROD_NUM, PROD_NAME, PROD_PRICE, PROD_IMAGE, PROD_DETAIL, PROD_CAPACITY, PROD_SUPPLIER, PROD_DEL_FEE, RECOMMEND, EMPLOYEE_ID, CTGR
	   	   PURCHASE_NUM, REVIEW_DATE, REVIEW_CONTENT, REVIEW_IMG
	from products p, review r
	where p.PROD_NUM = r.PROD_NUM(+) and p.PROD_NUM = #{prodNum}
</select>

<delete id="cartGoodsDel" parameterType="model.CartDTO">
	delete from cart
	where PROD_NUM = #{prodNum} and MEM_ID = #{memId}
</delete>

<delete id="goodsCartRemove" parameterType="hashMap">
	delete from cart
	<where>
		<if test="prodNums!=null">
		MEM_ID = #{memId}
		and
		PROD_NUM in 
		<foreach collection="prodNums" item="prodNum" index="index" open="(" close=")" separator=",">
		#{prodNum}</foreach></if>		
	</where>
</delete>



</mapper>